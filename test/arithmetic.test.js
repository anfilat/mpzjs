const GBI = require('../');

test('add', () => {
    for (let i = -10; i < 10; i++) {
        for (let j = -10; j < 10; j++) {
            const js = j.toString();
            const ks = (i + j).toString();
            const result = GBI();

            expect(GBI(i).add(j).toString()).toEqual(ks);
            expect(GBI(i).add(js).toString()).toEqual(ks);
            expect(GBI(i).add(GBI(j)).toString()).toEqual(ks);

            GBI.add(result, i, j);
            expect(result.toString()).toEqual(ks);
            GBI.add(result, i, js);
            expect(result.toString()).toEqual(ks);
            GBI.add(result, GBI(i), GBI(j));
            expect(result.toString()).toEqual(ks);
        }
    }

    expect(() => {
        GBI.add(1, 2);
    }).toThrow();

    expect(() => {
        GBI.add(GBI(1), GBI(2));
    }).toThrow();

    expect(() => {
        GBI.add(GBI(1));
    }).toThrow();

    expect(
        GBI(
            '201781752444966478956292456789265633588628356858680927185287861892'
            + '9889675589272409635031813235465496971529430565627918846694860512'
            + '1492948268400884893722767401972695174353441'
        ).add(
            '939769862972759638577945343130228368606420083646071622223953046277'
            + '3784500359975110887672142614667937014937371109558223563373329424'
            + '0624814097369771481147215472578762824607080'
        ).toString()
    ).toEqual(
        '1141551615417726117534237799919494002195048440504752549409240908170367'
        + '41759492475205227039558501334339864668016751861424100681899362117762'
        + '365770656374869982874551457998960521'
    );
});

test('sub', () => {
    for (let i = -10; i < 10; i++) {
        for (let j = -10; j < 10; j++) {
            const js = j.toString();
            const ks = (i - j).toString();
            const result = GBI();

            expect(GBI(i).sub(j).toString()).toEqual(ks);
            expect(GBI(i).sub(js).toString()).toEqual(ks);
            expect(GBI(i).sub(GBI(j)).toString()).toEqual(ks);

            GBI.sub(result, i, j);
            expect(result.toString()).toEqual(ks);
            GBI.sub(result, i, js);
            expect(result.toString()).toEqual(ks);
            GBI.sub(result, GBI(i), GBI(j));
            expect(result.toString()).toEqual(ks);
        }
    }

    expect(() => {
        GBI.sub(1, 2);
    }).toThrow();

    expect(() => {
        GBI.sub(GBI(1), GBI(2));
    }).toThrow();

    expect(() => {
        GBI.sub(GBI(1));
    }).toThrow();

    expect(
        GBI(
            '635849762218952604062459342660379446997761295162166888134051068531'
            + '9813941775949841573516110003093332652267534768664621969514455380'
            + '8051168706779408804756208386011014197185296'
        ).sub(
            '757617343536280696839135295661092954931163607913400460585109207644'
            + '7966483882748233585856350085641718822741649072106343655764769889'
            + '6399869016678013515043471880323279258685478'
        ).toString()
    ).toEqual(
        '-121767581317328092776675953000713507933402312751233572451058139112815'
        + '25421067983920123402400825483861704741143034417216862503145088348700'
        + '309898604710287263494312265061500182'
    );
});

test('mul', () => {
    for (let i = -10; i < 10; i++) {
        for (let j = -10; j < 10; j++) {
            const js = j.toString();
            const ks = (i * j).toString();
            const result = GBI();

            expect(GBI(i).mul(j).toString()).toEqual(ks);
            expect(GBI(i).mul(js).toString()).toEqual(ks);
            expect(GBI(i).mul(GBI(j)).toString()).toEqual(ks);

            GBI.mul(result, i, j);
            expect(result.toString()).toEqual(ks);
            GBI.mul(result, i, js);
            expect(result.toString()).toEqual(ks);
            GBI.mul(result, GBI(i), GBI(j));
            expect(result.toString()).toEqual(ks);
        }
    }

    expect(() => {
        GBI.mul(1, 2);
    }).toThrow();

    expect(() => {
        GBI.mul(GBI(1), GBI(2));
    }).toThrow();

    expect(() => {
        GBI.mul(GBI(1));
    }).toThrow();

    expect(
        GBI(
            '433593290010590489671135819286259593426549306666324008679782084292'
            + '2446494189019075159822930571858728009485237489829138626896756141'
            + '8738958337632249177044975686477011571044266'
        ).mul(
            '127790264841901718791915669264129510947625523373763053776083279450'
            + '3886212911067061184379695097643279217271150419129022856601771338'
            + '794256383410400076210073482253089544155377'
        ).toString()
    ).toEqual(
        '5540900136412485758752141142221047463857522755277604708501015732755989'
        + '17659432099233635577634197309727815375309484297883528869192732141328'
        + '99346769031695550850320602049507618052164677667378189154076988316301'
        + '23719953859959804490669091769150047414629675184805332001182298088891'
        + '58079529848220802017396422115936618644438110463469902675126288489182'
        + '82'
    );

    expect(GBI('10000000000000000000000000000').mul(-123).toString())
        .toEqual('-1230000000000000000000000000000');
});

test('div', () => {
    for (let i = -10; i < 10; i++) {
        for (let j = -10; j < 10; j++) {
            const js = j.toString();
            const ks = Math.floor(i / j).toString();
            if (ks.match(/^-?\d+$/)) { // ignore exceptions
                const result = GBI();

                expect(GBI(i).div(j).toString()).toEqual(ks);
                expect(GBI(i).div(js).toString()).toEqual(ks);
                expect(GBI(i).div(GBI(j)).toString()).toEqual(ks);

                GBI.div(result, i, j);
                expect(result.toString()).toEqual(ks);
                GBI.div(result, i, js);
                expect(result.toString()).toEqual(ks);
                GBI.div(result, GBI(i), GBI(j));
                expect(result.toString()).toEqual(ks);
            }
        }
    }

    expect(() => {
        GBI.div(1, 2);
    }).toThrow();

    expect(() => {
        GBI.div(GBI(1), GBI(2));
    }).toThrow();

    expect(() => {
        GBI.div(GBI(1));
    }).toThrow();

    expect(
        GBI(
            '433593290010590489671135819286259593426549306666324008679782084292'
            + '2446494189019075159822930571858728009485237489829138626896756141'
            + '8738958337632249177044975686477011571044266'
        ).div(
            '127790264841901718791915669264129510947625523373763053776083279450'
            + '3886212911067061184379695097643279217271150419129022856601771338'
            + '794256383410400076210073482253089544155377'
        ).toString()
    ).toEqual(
        '33'
    );
});

test('abs', () => {
    expect(
        GBI(
            '433593290010590489671135819286259593426549306666324008679782084292'
            + '2446494189019075159822930571858728009485237489829138626896756141'
            + '8738958337632249177044975686477011571044266'
        ).abs().toString()
    ).toEqual(
        '4335932900105904896711358192862595934265493066663240086797820842922446'
        + '49418901907515982293057185872800948523748982913862689675614187389583'
        + '37632249177044975686477011571044266'
    );

    expect(
        GBI(
            '-43359329001059048967113581928625959342654930666632400867978208429'
            + '2244649418901907515982293057185872800948523748982913862689675614'
            + '18738958337632249177044975686477011571044266'
        ).abs().toString()
    ).toEqual(
        '4335932900105904896711358192862595934265493066663240086797820842922446'
        + '49418901907515982293057185872800948523748982913862689675614187389583'
        + '37632249177044975686477011571044266'
    );
});

test('neg', () => {
    expect(
        GBI(
            '433593290010590489671135819286259593426549306666324008679782084292'
            + '2446494189019075159822930571858728009485237489829138626896756141'
            + '8738958337632249177044975686477011571044266'
        ).neg().toString()
    ).toEqual(
        '-433593290010590489671135819286259593426549306666324008679782084292244'
        + '64941890190751598229305718587280094852374898291386268967561418738958'
        + '337632249177044975686477011571044266'
    );

    expect(
        GBI(
            '-43359329001059048967113581928625959342654930666632400867978208429'
            + '2244649418901907515982293057185872800948523748982913862689675614'
            + '18738958337632249177044975686477011571044266'
        ).neg().toString()
    ).toEqual(
        '4335932900105904896711358192862595934265493066663240086797820842922446'
        + '49418901907515982293057185872800948523748982913862689675614187389583'
        + '37632249177044975686477011571044266'
    );
});

test('mod', () => {
    for (let i = 0; i < 10; i++) {
        for (let j = 0; j < 10; j++) {
            const js = j.toString();
            if (!isNaN(i % j)) {
                const ks = (i % j).toString();
                expect(GBI(i).mod(j).toString()).toEqual(ks);
                expect(GBI(i).mod(js).toString()).toEqual(ks);
                expect(GBI(i).mod(GBI(j)).toString()).toEqual(ks);
                expect(GBI.mod(i, j).toString()).toEqual(ks);
            }
        }
    }

    expect(
        GBI('486541542410442549118519277483401413')
            .mod('1802185856709793916115771381388554')
            .toString()
    ).toEqual('1753546955507985683376775889880387');
});
